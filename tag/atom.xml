<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>Muhammad Attiyah - Home</title> <link href="http://muattiyah.com"/> <link type="application/atom+xml" rel="self" href="http://muattiyah.com/atom.xml"/> <updated>Wed, 30 May 2018 15:57:50 +0200</updated> <author> <name>Muhammad Attiyah</name> </author> <entry> <link type="text/html" rel="alternate" href="http://muattiyah.com/posts/ADTs-Algebraic-Data-Types-in-Haskell.html"/> <title>ADTs (Algebraic Data Types) in Haskell</title> <published>2018-05-30</published> <updated>2018-05-30</updated> <author> <name>Muhammad Attiyah</name> <uri>http://muattiyah.com</uri> </author> <content type="html">&lt;p&gt;Algebraic Data Types are a way for us to define types like the ones that come with Haskell e.g. &lt;code&gt;Bool&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Single Constructor Without Arguments&lt;/h2&gt;

&lt;p&gt;The most simple data type we can construct in Haskell is a type with a single constructor,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;MkFrame&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;MkFrame&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examining the type in &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:&amp;gt; :type MkFrame
MkFrame :: Frame

:&amp;gt; :type x
x :: Frame&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we use the &lt;code&gt;data&lt;/code&gt; keyword to signify a &lt;strong&gt;Data Type&lt;/strong&gt;, &lt;code&gt;Frame&lt;/code&gt; is the name of that type and we refer to it as a &lt;strong&gt;Type Constructor&lt;/strong&gt;. &lt;code&gt;MkFrame&lt;/code&gt; is called a &lt;strong&gt;Data Constructor&lt;/strong&gt; and this is how we create new instances of the type &lt;code&gt;Frame&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Enums&lt;/h2&gt;

&lt;p&gt;Enums (Enumeration Types), also referred to as &lt;em&gt;Sum Types&lt;/em&gt; allow us to design a type that is reminiscent of a Logical OR. Suppose we want to have a type that will represent a day in the week, the day will be either Saturday, or Monday, or Tuesday, ...etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Saturday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Sunday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Monday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Tuesday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Wednesday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Thursday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Friday&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Tuesday&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examining the type in &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:&amp;gt; :type Saturday
Saturday :: Day

:&amp;gt; :type day
pday :: Day&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Pattern Matching&lt;/h3&gt;

&lt;p&gt;We can pattern match on our data type like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Saturday&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Sunday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Monday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Tuesday&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 4
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Wednesday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 5
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Thursday&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 6
&lt;span class=&quot;function&quot;&gt;dayNumber&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Friday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or using a &lt;code&gt;case of&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;dayNumberCase&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;dayNumberCase&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt;
&amp;nbsp; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Saturday&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 0
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Sunday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 2
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Monday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 3
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Tuesday&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 4
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Wednesday&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 5
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Thursday&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 6
&amp;nbsp;   &lt;span class=&quot;variable&quot;&gt;Friday&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Constructors with arguments&lt;/h2&gt;

&lt;p&gt;We can also declare types whose constructor takes one or more arguments, these are commonly referred to as &lt;em&gt;Product Types&lt;/em&gt;. Let&#039;s say we want to represent a point in the cartesian coordinate system i.e. a point with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;mypoint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;P&lt;/span&gt; 1 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examining in &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:&amp;gt; :type P
P :: Int -&amp;gt; Int -&amp;gt; Point

:&amp;gt; :type mypoint
mypoint :: Point

:&amp;gt; :type P 1 2
P 1 2 :: Point&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#039;s a convention in Haskell code to sometimes label the data constructor with the same label as the type constructor, to illustrate this with our &lt;code&gt;Point&lt;/code&gt; example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;mypoint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Point&lt;/span&gt; 1 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Record Syntax&lt;/h2&gt;

&lt;p&gt;Let&#039;s say we want to define a &lt;code&gt;User&lt;/code&gt; type that has the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; of a user, we can try to do something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;name&lt;/code&gt; is of type &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; is of type &lt;code&gt;Int&lt;/code&gt;. However, in our application, we will want to get the name and age from an instance of this data type, we can do this like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;getName&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;getName&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; name _&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; name

&lt;span class=&quot;function&quot;&gt;getAge&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;getAge&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; _ age&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; age&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but, as you can imagine, this would get too daunting and verbose if our data constructor takes a large number of arguments, and we&#039;ll have to modify all these accessor functions
if we add or remove arguments from the data constructor. Also, we have to keep in mind the position of each argument. Enter records, records allow us to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt;
&amp;nbsp;   &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt; name  &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;String&lt;/span&gt;
&amp;nbsp;   , age   &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;
&amp;nbsp;   &lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;-- Create a User&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt;
&amp;nbsp;   &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt; name &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Oliver Heaviside&quot;&lt;/span&gt;
&amp;nbsp;   , age &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 74
&amp;nbsp;   &lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;-- This still works&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;James Clerk Maxwell&quot;&lt;/span&gt; 48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and get accessor functions for free, these will be automagically generated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also get a nice field update syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;changeAge&lt;/span&gt; user newAge &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; user &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt; age &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; newAge&lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;User&lt;/span&gt;
&amp;nbsp;   &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt; name &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Oliver Heaviside&quot;&lt;/span&gt;
&amp;nbsp;   , age &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; 74
&amp;nbsp;   &lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;newuser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; changeAge user1 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Record Downsides&lt;/h3&gt;

&lt;p&gt;Unfortunately records have some issues, refer to &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Records&quot; title=&quot;Issues with records in Haskell&quot;&gt;this&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;Parametrized&lt;/h2&gt;

&lt;p&gt;Type constructors can be parametrized with types, the standard &lt;code&gt;Prelude&lt;/code&gt; library define the &lt;code&gt;Maybe&lt;/code&gt; type:
&lt;code&gt;haskell
data Maybe a = Nothing | Just a
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;Maybe&lt;/code&gt; is parametrized with the generic type &lt;code&gt;a&lt;/code&gt; which can take on any type, this is a bit like &lt;strong&gt;Generics&lt;/strong&gt; in other languages. The &lt;code&gt;Maybe&lt;/code&gt; type
allows us to express the nonexistence of a value, for example when trying to take the head of a list, instead of erroneously applying head to an empty
list, we can defend against this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;lhead&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;a&lt;/span&gt;]&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Maybe&lt;/span&gt; a
&lt;span class=&quot;function&quot;&gt;lhead&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;]&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Nothing&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;lhead&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;head xs&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, playing around in &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:&amp;gt; :type lhead []
lhead [] :: Maybe a

:&amp;gt; :type lhead [&#039;a&#039;]
lhead [&#039;a&#039;] :: Maybe Char

:&amp;gt; :type lhead [1]
lhead [1] :: Num a =&amp;gt; Maybe a&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Recursive Types&lt;/h2&gt;

&lt;p&gt;Haskell allows us to define types in terms of themselves &lt;em&gt;recursive types&lt;/em&gt;. Let&#039;s illustrate this by making a type for a &lt;strong&gt;Binary Tree&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data BinTree a = EmptyTree
               | Node a (BinTree a) (BinTree a)

mytree = Node 1 EmptyTree EmptyTree&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we constructed &lt;code&gt;mytree&lt;/code&gt; to be a tree with a single node, with an empty left and right subtrees. We can also construct a tree with 3 nodes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;function&quot;&gt;mytree2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Node&lt;/span&gt; 1 &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;Node&lt;/span&gt; 2 &lt;span class=&quot;variable&quot;&gt;EmptyNode&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;EmptyNode&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;Node&lt;/span&gt; 3 &lt;span class=&quot;variable&quot;&gt;EmptyNode&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;EmptyNode&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://muattiyah.com/posts/Mathematical-Induction.html"/> <title>Mathematical Induction</title> <published>2017-06-12</published> <updated>2017-06-12</updated> <author> <name>Muhammad Attiyah</name> <uri>http://muattiyah.com</uri> </author> <content type="html">&lt;br /&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 1801 651.57&quot;&gt;&lt;defs&gt;&lt;style&gt;.cls-1{fill:#4f2837;stroke:#1ba5b8;}.cls-1,.cls-3{stroke-miterlimit:10;}.cls-2{fill:#141411;opacity:0.18;}.cls-3{fill:none;stroke-width:2px;}.cls-3,.cls-4{stroke:#fff;}.cls-4{fill:#1d1d1b;stroke-width:0.65px;}.cls-5{font-size:123px;fill:#fff;font-family:CrimsonText-Bold, Crimson Text;font-weight:700;}&lt;/style&gt;&lt;/defs&gt;&lt;title&gt;induction&lt;/title&gt;&lt;g id=&quot;Background&quot;&gt;&lt;rect class=&quot;cls-1&quot; x=&quot;0.5&quot; y=&quot;0.5&quot; width=&quot;1800&quot; height=&quot;600&quot;/&gt;&lt;/g&gt;&lt;g id=&quot;Arrow&quot;&gt;&lt;path class=&quot;cls-2&quot; d=&quot;M1375.6,539.76c-41.56-36-76.09-124.66-4.59-169.32,139.7-87.26,13.24-163.74-3.37-174H1245.28l242.6-169.91L1751.29,195.4l-130.47,1.07c12.74,12.21,108.66,98.75-15.88,179.08-83.8,54-42.37,130.76,8.21,164.12Z&quot; transform=&quot;translate(0.5 0.5)&quot;/&gt;&lt;/g&gt;&lt;g id=&quot;Ladder&quot;&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.98&quot; y1=&quot;24.6&quot; x2=&quot;1393.6&quot; y2=&quot;560.08&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1499.82&quot; y1=&quot;24.6&quot; x2=&quot;1588.5&quot; y2=&quot;560.08&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.81&quot; y1=&quot;25.62&quot; x2=&quot;1499.99&quot; y2=&quot;25.62&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.72&quot; y1=&quot;26.16&quot; x2=&quot;1500.08&quot; y2=&quot;26.16&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.58&quot; y1=&quot;27.05&quot; x2=&quot;1500.22&quot; y2=&quot;27.05&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.39&quot; y1=&quot;28.21&quot; x2=&quot;1500.41&quot; y2=&quot;28.21&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1481.19&quot; y1=&quot;29.41&quot; x2=&quot;1500.61&quot; y2=&quot;29.41&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1480.94&quot; y1=&quot;30.9&quot; x2=&quot;1500.86&quot; y2=&quot;30.9&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1480.6&quot; y1=&quot;32.98&quot; x2=&quot;1501.21&quot; y2=&quot;32.98&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1480.16&quot; y1=&quot;35.61&quot; x2=&quot;1501.64&quot; y2=&quot;35.61&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1479.57&quot; y1=&quot;39.21&quot; x2=&quot;1502.24&quot; y2=&quot;39.21&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1479.13&quot; y1=&quot;41.87&quot; x2=&quot;1502.68&quot; y2=&quot;41.87&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1478.55&quot; y1=&quot;45.38&quot; x2=&quot;1503.26&quot; y2=&quot;45.38&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1477.87&quot; y1=&quot;49.26&quot; x2=&quot;1503.86&quot; y2=&quot;49.26&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1477.15&quot; y1=&quot;53.57&quot; x2=&quot;1504.57&quot; y2=&quot;53.57&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1476.41&quot; y1=&quot;58.37&quot; x2=&quot;1505.41&quot; y2=&quot;58.37&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1475.46&quot; y1=&quot;63.76&quot; x2=&quot;1506.25&quot; y2=&quot;63.76&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1474.45&quot; y1=&quot;69.86&quot; x2=&quot;1507.26&quot; y2=&quot;69.86&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1473.3&quot; y1=&quot;76.82&quot; x2=&quot;1508.4&quot; y2=&quot;76.82&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1471.98&quot; y1=&quot;84.82&quot; x2=&quot;1509.73&quot; y2=&quot;84.82&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1470.43&quot; y1=&quot;94.13&quot; x2=&quot;1511.26&quot; y2=&quot;94.13&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1468.7&quot; y1=&quot;105.09&quot; x2=&quot;1513.15&quot; y2=&quot;105.09&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1466.45&quot; y1=&quot;118.19&quot; x2=&quot;1515.23&quot; y2=&quot;118.19&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1463.81&quot; y1=&quot;134.12&quot; x2=&quot;1517.86&quot; y2=&quot;134.12&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1460.64&quot; y1=&quot;153.9&quot; x2=&quot;1521.23&quot; y2=&quot;153.9&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1456.36&quot; y1=&quot;179.13&quot; x2=&quot;1525.29&quot; y2=&quot;179.13&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1450.84&quot; y1=&quot;212.42&quot; x2=&quot;1530.79&quot; y2=&quot;212.42&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1444.57&quot; y1=&quot;249.35&quot; x2=&quot;1537.04&quot; y2=&quot;249.35&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1432.06&quot; y1=&quot;325.84&quot; x2=&quot;1549.51&quot; y2=&quot;325.84&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1438.92&quot; y1=&quot;285.5&quot; x2=&quot;1543.03&quot; y2=&quot;285.5&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1414.3&quot; y1=&quot;434.69&quot; x2=&quot;1567.73&quot; y2=&quot;434.69&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1402.09&quot; y1=&quot;508.5&quot; x2=&quot;1579.96&quot; y2=&quot;508.5&quot;/&gt;&lt;line class=&quot;cls-3&quot; x1=&quot;1423.4&quot; y1=&quot;379.5&quot; x2=&quot;1558.59&quot; y2=&quot;379.5&quot;/&gt;&lt;/g&gt;&lt;g id=&quot;People&quot;&gt;&lt;g id=&quot;Figure_with_Child&quot; data-name=&quot;Figure with Child&quot;&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1441.6&quot; y=&quot;466.04&quot; width=&quot;11.96&quot; height=&quot;57.23&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1492.64 536.11 1492.64 466.04 1453.56 466.04 1453.56 538.4 1453.58 538.4 1453.58 599.31 1467.43 599.31 1467.43 537.94 1478.85 537.94 1478.85 599.31 1492.71 599.31 1492.71 536.11 1492.64 536.11&quot;/&gt;&lt;circle class=&quot;cls-4&quot; cx=&quot;1472.57&quot; cy=&quot;449.16&quot; r=&quot;16.88&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1542.74 522.35 1509.83 504.81 1509.41 513.14 1542.33 530.67 1542.74 522.35&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1565.84&quot; y=&quot;520.52&quot; width=&quot;7.07&quot; height=&quot;32.64&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1542.74 561.94 1542.74 520.52 1565.84 520.52 1565.84 563.3 1565.83 563.3 1565.83 599.31 1557.64 599.31 1557.64 563.02 1550.88 563.02 1550.88 599.31 1542.69 599.31 1542.69 561.94 1542.74 561.94&quot;/&gt;&lt;circle class=&quot;cls-4&quot; cx=&quot;1554.61&quot; cy=&quot;510.54&quot; r=&quot;9.98&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1504.59 466.04 1524.38 521.04 1509.41 513.14 1492.63 466.04 1504.59 466.04&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;Child&quot;&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1509.74&quot; y=&quot;337.53&quot; width=&quot;7.7&quot; height=&quot;35.52&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1476.85&quot; y=&quot;337.53&quot; width=&quot;7.7&quot; height=&quot;35.52&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1484.59 382.62 1484.59 337.53 1509.74 337.53 1509.74 384.09 1509.73 384.09 1509.73 423.28 1500.81 423.28 1500.81 383.79 1493.46 383.79 1493.46 423.28 1484.55 423.28 1484.55 382.62 1484.59 382.62&quot;/&gt;&lt;circle class=&quot;cls-4&quot; cx=&quot;1497.51&quot; cy=&quot;326.67&quot; r=&quot;10.86&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1504.85&quot; y=&quot;197.64&quot; width=&quot;5.38&quot; height=&quot;24.84&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1481.85&quot; y=&quot;197.64&quot; width=&quot;5.38&quot; height=&quot;24.84&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1487.26 229.16 1487.26 197.64 1504.85 197.64 1504.85 230.19 1504.84 230.19 1504.84 257.59 1498.6 257.59 1498.6 229.98 1493.46 229.98 1493.46 257.59 1487.23 257.59 1487.23 229.16 1487.26 229.16&quot;/&gt;&lt;circle class=&quot;cls-4&quot; cx=&quot;1496.29&quot; cy=&quot;190.04&quot; r=&quot;7.59&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1495.13&quot; y=&quot;85.37&quot; width=&quot;2.2&quot; height=&quot;10.16&quot;/&gt;&lt;rect class=&quot;cls-4&quot; x=&quot;1485.72&quot; y=&quot;85.37&quot; width=&quot;2.2&quot; height=&quot;10.16&quot;/&gt;&lt;polygon class=&quot;cls-4&quot; points=&quot;1487.93 98.27 1487.93 85.37 1495.13 85.37 1495.13 98.69 1495.13 98.69 1495.13 109.91 1492.57 109.91 1492.57 98.61 1490.47 98.61 1490.47 109.91 1487.92 109.91 1487.92 98.27 1487.93 98.27&quot;/&gt;&lt;circle class=&quot;cls-4&quot; cx=&quot;1491.63&quot; cy=&quot;82.26&quot; r=&quot;3.11&quot;/&gt;&lt;text class=&quot;cls-5&quot; transform=&quot;translate(128.13 257.58)&quot;&gt;Mathematical &lt;tspan x=&quot;0&quot; y=&quot;147.6&quot;&gt;Induction&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;Suppose you want to sum up the first &lt;span class=&quot;math inline&quot;&gt;10&lt;/span&gt; natural numbers &lt;span class=&quot;math inline&quot;&gt;1, 2, 3, ...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The most obvious way to do it would be to add the numbers consecutively like so: &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55&lt;/span&gt;&lt;br /&gt; No big deal, but now you want to sum the first &lt;span class=&quot;math inline&quot;&gt;1000&lt;/span&gt; natural numbers i.e. &lt;span class=&quot;math inline&quot;&gt;1, 2, 3, ..., 1000&lt;/span&gt;. While you’re carrying out this laborious task, your friend &lt;strong&gt;Hypatia&lt;/strong&gt; passes by and tells you with a confused look “Why are you doing all that? You can just use this formula:” &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \frac{n(n+1)}{2} $$&lt;/span&gt;&lt;br /&gt; Skeptical, you give it a try on the first &lt;span class=&quot;math inline&quot;&gt;10&lt;/span&gt; natural numbers, because you already know the answer to that. So, you substitute &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; for &lt;span class=&quot;math inline&quot;&gt;10&lt;/span&gt; and you get &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \frac{10(10+1)}{2} = \frac{110}{2} = 55 $$&lt;/span&gt;&lt;br /&gt; Lo and Behold, it’s the right answer. Go ahead and try it for other values of &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; yourself, see if it works.&lt;/p&gt;
&lt;p&gt;So it works for the couple of instances that you’ve tried, but how do we know it works for the first 1024 natural numbers i.e. &lt;span class=&quot;math inline&quot;&gt;1, 2, 3, ..., 1024&lt;/span&gt; or for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 50000&lt;/span&gt;. It seems implausible to actually try it for all instances of &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;. And even if we tried it for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; up to &lt;span class=&quot;math inline&quot;&gt;50000&lt;/span&gt;, we only know it works thus far, how do we know whether it works for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 50001, &lt;em&gt;n&lt;/em&gt; = 50002, ...&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;/span&gt; especially given the fact that the set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_number&quot;&gt;Natural Numbers&lt;/a&gt; &lt;span class=&quot;math inline&quot;&gt;ℕ&lt;/span&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Countable_set&quot;&gt;Countably Infinite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t know what the last couple of phrases mean, think of it this way, if we start with the number &lt;span class=&quot;math inline&quot;&gt;1&lt;/span&gt; and add &lt;span class=&quot;math inline&quot;&gt;1&lt;/span&gt; to it and keep adding &lt;span class=&quot;math inline&quot;&gt;1&lt;/span&gt; to the sum, you will always get a new natural number. For example, &lt;span class=&quot;math inline&quot;&gt;1 + 1 = 2,  2 + 1 = 3,  3 + 1 = 4&lt;/span&gt; and so on.&lt;/p&gt;
&lt;p&gt;Obviously our manual method of verifying the technique’s applicability on single instances of &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; is incapable of convincing us of the applicability of the rule for any &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; and we need a new method to do just that, that method is &lt;strong&gt;Mathematical Induction&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mathematical Induction&lt;/em&gt;&lt;/strong&gt; is a general way to prove that some statement about the natural number &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; is true for all &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ≥ 1&lt;/span&gt;.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A proof by induction involves first proving that we want to prove holds for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt; and then proving that if it holds for &lt;strong&gt;any&lt;/strong&gt; &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; then it holds for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;analogy&quot;&gt;Analogy&lt;/h2&gt;
&lt;p&gt;As a helpful analogy, think of the process of climbing a ladder, we will prove that we can climb the first step, then we will prove that if we can climb &lt;strong&gt;any&lt;/strong&gt; step then we can climb the step that’s after it. Now we know that we can climb the first step and we know that we can climb any step after it. Symbolically, think of the first step as saying that &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt;, think of &lt;strong&gt;any&lt;/strong&gt; step as &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; and think of the step that follows &lt;strong&gt;any&lt;/strong&gt; step as &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Informally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Can climb first step &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;If we can climb step &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; then we can climb step &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Let &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; be &lt;span class=&quot;math inline&quot;&gt;1&lt;/span&gt;, we can already climb the first step, let &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/span&gt; be &lt;span class=&quot;math inline&quot;&gt;1 + 1 = 2&lt;/span&gt;, we can climb the second step.&lt;/li&gt;
&lt;li&gt;Let &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; be &lt;span class=&quot;math inline&quot;&gt;2&lt;/span&gt;, we know we can climb it from item &lt;code&gt;3&lt;/code&gt;, so we can climb the &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/span&gt; step which is the third step.&lt;/li&gt;
&lt;li&gt;Repeat ad infinitum, can climb any step.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;outline-for-a-proof-by-induction&quot;&gt;Outline for a proof by induction&lt;/h2&gt;
&lt;p&gt;A proof by induction will involve the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prove that the statement where &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt; is true, this is called the &lt;strong&gt;Base Case&lt;/strong&gt; &lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, we’ll refer to this statement as &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Prove that when &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ≥ 1&lt;/span&gt;, the statement &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt; ⇒ &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sub&gt;&lt;/span&gt; is true.&lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; This is called the &lt;strong&gt;Inductive Step&lt;/strong&gt; &lt;a href=&quot;#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After we’ve completed these two steps, we say that it follows by &lt;em&gt;Mathematical Induction&lt;/em&gt; that every &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; is true.&lt;/p&gt;
&lt;h2 id=&quot;proof-sketch-for-our-summation-technique&quot;&gt;Proof Sketch for our Summation Technique&lt;/h2&gt;
&lt;p&gt;We will first start by proving the &lt;strong&gt;Base Case&lt;/strong&gt;, in our case this means proving that the technique holds for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt;. Again, we will refer to this statement as &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We will then proceed to the &lt;strong&gt;Inductive Step&lt;/strong&gt;, proving that &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; ⇒ &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sub&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In our case, this means proving that &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \frac{n(n+1)}{2} \implies \frac{(n+1)((n+1)+1)}{2} $$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;proof&quot;&gt;Proof&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Base Case:&lt;/strong&gt; When &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; = 1&lt;/span&gt;, our formula expands to &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \frac{1(1+1)}{2} $$&lt;/span&gt;&lt;br /&gt; which evaluates to &lt;span class=&quot;math inline&quot;&gt;1&lt;/span&gt; and is true.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inductive Step:&lt;/strong&gt; Assume that our formula &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; is true, this means that &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ 1+2+3+...+n = \frac{n(n+1)}{2} $$&lt;/span&gt;&lt;br /&gt; is true. This is called the &lt;strong&gt;Induction Hypothesis&lt;/strong&gt;. We now have to show that &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sub&gt;&lt;/span&gt; is true, algebraically this means that &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ (1+2+3+...+n)+(n+1) = \frac{(n+1)((n+1)+1)}{2} $$&lt;/span&gt;&lt;br /&gt; Let’s start with the left hand side &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;(1 + 2 + 3 + ... + &lt;em&gt;n&lt;/em&gt;)+(&lt;em&gt;n&lt;/em&gt; + 1)&lt;/span&gt;&lt;br /&gt; Since we’ve already assumed that S&lt;sub&gt;n&lt;/sub&gt; &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ 1+2+3+...+n = \frac{n(n+1)}{2} $$&lt;/span&gt;&lt;br /&gt; is true, we can substitute it in the left hand side like so: &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$
\begin{align}
(1+2+3+...+n)+(n+1) &amp;amp; = \frac{n(n+1)}{2} + n+1\\
&amp;amp; = \frac{n(n+1)+2(n+1)}{2}\\
&amp;amp; = \frac{n^2+n+2n+2}{2}\\
&amp;amp; = \frac{n^2+3n+2}{2}\\
&amp;amp; = \frac{(n+1)(n+2)}{2}\\
&amp;amp; = \frac{(n+1)((n+1)+1)}{2}
\end{align}
$$&lt;/span&gt;&lt;br /&gt; This shows us that &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sub&gt;&lt;/span&gt; is indeed true if &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; is true. Since we’ve proven the &lt;strong&gt;Base Case&lt;/strong&gt; and conducted the &lt;strong&gt;Inductive Step&lt;/strong&gt;, our formula &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \frac{n(n+1)}{2} $$&lt;/span&gt;&lt;br /&gt; is true for all numbers &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ≥ 1&lt;/span&gt; by &lt;strong&gt;Mathematical Induction&lt;/strong&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;\( \square \)&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&quot;proposition&quot;&gt;Proposition&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ∈ ℕ&lt;/span&gt;&lt;a href=&quot;#fn6&quot; class=&quot;footnoteRef&quot; id=&quot;fnref6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; then the sum of the first &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; odd numbers &lt;span class=&quot;math inline&quot;&gt;1 + 3 + 5 + 7 + ... + (2&lt;em&gt;n&lt;/em&gt; − 1)&lt;/span&gt; is &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h4&gt;Proof&lt;/h4&gt;
&lt;div class=&quot;proof-body&quot;&gt;
&lt;p&gt;&lt;b&gt;Base Case: &lt;/b&gt;\( S_1 = 1^2 = 1 \), our base case holds.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Inductive Step: &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Assume that \( 1+3+5+7+...+(2n-1)=n^2 \)&lt;/p&gt;
&lt;p&gt;Show that \( S_{n+1}: 1+3+5+7+...+(2(n)-1)+(2(n+1)-1)=(n+1)^2 \)&lt;/p&gt;
&lt;p&gt;\[
\begin{align}
1+3+5+7+...+(2n-1)+(2n+1) &amp; = n^2+2n+1\\
&amp; = (n+1)(n+1)\\
&amp; = (n+1)^2
\end{align}
\]&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Therefore, it follows by induction that &lt;span class=&quot;math inline&quot;&gt;1 + 3 + 5 + 7 + ... + (2&lt;em&gt;n&lt;/em&gt; − 1)=&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt; as required.&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;\( \square \)&lt;/p&gt;

&lt;h3 id=&quot;proposition-1&quot;&gt;Proposition&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ∈ ℕ&lt;/span&gt;, then &lt;span class=&quot;math inline&quot;&gt;3|(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; − &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;h4&gt;Proof&lt;/h4&gt;
&lt;div class=&quot;proof-body&quot;&gt;
&lt;p&gt;&lt;b&gt;Base Case: &lt;/b&gt;\( S_1: 1^3-1 = 0 \) and we \( 0 \) is divisible by 3, base case holds.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Inductive Step: &lt;/b&gt;Assume \( 3 | n^3-n \), this mean that there exists an integer \( a \) such that
\( 3a = n^3-n \).&lt;/p&gt;
&lt;p&gt;Our goal is to show that \( S_{n+1} \) holds i.e. \( 3 | (n+1)^3 - (n+1) \)&lt;/p&gt;
&lt;p&gt;\[
\begin{align}
(n+1)^3 - (n+1) &amp; = n^3+3n^2+3n+1-n-1\\
&amp; = n^3+3n^2+3n-n\\
&amp; = (n^3-n)+3n^2+3n\\
&amp; = 3a + 3n^2 + 3n\\
&amp; = 3(a+n^2+n)
\end{align}
\]&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;It follows by induction that &lt;span class=&quot;math inline&quot;&gt;3|(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; − &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;\( \square \)&lt;/p&gt;

&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&quot;exercise&quot;&gt;Exercise&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; is a non-negative integer, then &lt;span class=&quot;math inline&quot;&gt;5|(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;5&lt;/sup&gt; − &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&quot;exercise-1&quot;&gt;Exercise&lt;/h3&gt;
&lt;p&gt;If &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ∈ ℤ&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt; ≥ 0&lt;/span&gt;, then &lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$ \sum_{i=0}^{n} i.i! = (n+1)!-1 $$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;exercise-2&quot;&gt;Exercise&lt;/h3&gt;
&lt;p&gt;For every Natural Number &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;2&lt;sup&gt;0&lt;/sup&gt; + 2&lt;sup&gt;1&lt;/sup&gt; + 2&lt;sup&gt;2&lt;/sup&gt; + ... + 2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt; = 2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sup&gt; − 1&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Induction is actually more general than this, it can work on any collection which obeys the &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-ordering_principle&quot;&gt;Well-Ordering Principle&lt;/a&gt;.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;This is sometimes referred to as the &lt;strong&gt;Basis&lt;/strong&gt;.&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;Read this as “&lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; implies &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; + 1&lt;/sub&gt;&lt;/span&gt;”.&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;I am gradually introducing notation to get you used to it, if you find it confusing, revisit the &lt;a href=&quot;#definition&quot; class=&quot;uri&quot;&gt;#definition&lt;/a&gt; and read this again.&lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;This is sometimes referred to as the &lt;strong&gt;Induction Step&lt;/strong&gt;.&lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn6&quot;&gt;&lt;p&gt;Read this as “&lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; belongs to the set &lt;span class=&quot;math inline&quot;&gt;ℕ&lt;/span&gt; of &lt;em&gt;Natural Numbers&lt;/em&gt;”.&lt;a href=&quot;#fnref6&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content> </entry> </feed>